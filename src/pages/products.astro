---
import BaseLayout from "../layouts/BaseLayout.astro";
import * as fs from "fs";
import * as path from "path";
import Papa from "papaparse";

const base = import.meta.env.BASE_URL || '/3dstation_mk/';
const csvPath = path.resolve("./src/data/products.csv");
const csv = fs.readFileSync(csvPath, "utf8");
const { data: products } = Papa.parse(csv, { header: true });
---

<BaseLayout>
  <main class="min-h-screen bg-slate-900 text-slate-100 flex flex-col items-center py-16">
    <h1 class="text-4xl font-extrabold mb-8">Our Products</h1>
    <div class="w-full max-w-6xl mb-8 flex flex-col sm:flex-row gap-4 items-center justify-between">
      <div class="flex gap-2 w-full sm:w-auto">
        <input id="filter-input" type="text" placeholder="Filter by title..." class="px-4 py-2 rounded bg-slate-800 border border-slate-700 text-slate-100 focus:outline-none focus:ring-2 focus:ring-blue-500 w-full sm:w-64" />
      </div>
      <div class="flex gap-2 w-full sm:w-auto">
        <label for="sort-select" class="sr-only">Sort by</label>
        <select id="sort-select" class="px-4 py-2 rounded bg-slate-800 border border-slate-700 text-slate-100 focus:outline-none focus:ring-2 focus:ring-blue-500">
          <option value="name-asc">Name (A-Z)</option>
          <option value="name-desc">Name (Z-A)</option>
          <option value="price-asc">Price (Low-High)</option>
          <option value="price-desc">Price (High-Low)</option>
        </select>
      </div>
    </div>
    <div id="products-grid" class="grid grid-cols-1 sm:grid-cols-2 lg:grid-cols-3 gap-8 w-full max-w-6xl">
      {products.filter(p => p.title && p.mainImage).map((product, i) => (
        <div class="bg-slate-800 rounded-2xl shadow-lg flex flex-col items-center product-card" 
             data-title={product.title} 
             data-price={parseFloat((product.price||'').replace(/[^\d.]/g, '')) || 0}
             data-index={i}>
          <img src={`${base}${product.mainImage}`} alt={product.title} class="w-full h-64 object-cover rounded-xl border border-slate-700" loading="lazy" />
          <div class="w-full flex flex-col items-start p-4">
            <h2 class="text-xl font-bold text-slate-100 mb-1">{product.title}</h2>
            <p class="text-slate-400 mb-2">{product.subtitle || ""}</p>
            <span class="text-lg font-semibold text-cyan-400">{product.price || ""}</span>
            </div>
            <div class="flex gap-0 w-full mt-auto border-t border-slate-700">
              <a
                href={`/3dstation_mk/products/${i}`}
                class="flex-1 px-0 py-2 text-white font-semibold rounded-none rounded-bl-xl transition text-center border-r border-slate-700"
              >
                View Details
              </a>
              <a
                href={`mailto:3dstation.mk@gmail.com?subject=Order: ${encodeURIComponent(product.title)}&body=Order: ${encodeURIComponent(product.title)}%0AQuantity: 1%0AName: [blank]%0AAddress: [blank]`}
                class="flex-1 px-0 py-2 text-white font-semibold rounded-none rounded-br-xl  transition text-center"
                target="_blank"
                rel="noopener"
              >
                Order
              </a>
            </div>
        </div>
      ))}
    </div>
  </main>
  <script>
    const filterInput = document.getElementById('filter-input') as HTMLInputElement;
    const sortSelect = document.getElementById('sort-select') as HTMLSelectElement;
    const grid = document.getElementById('products-grid') as HTMLElement;
    let cards = Array.from(grid.children) as HTMLElement[];

    function renderCards(newOrder: HTMLElement[]) {
      grid.innerHTML = '';
      newOrder.forEach(card => grid.appendChild(card));
    }

    function filterAndSort() {
      let filtered = cards;
      const filter = filterInput.value.trim().toLowerCase();
      if (filter) {
        filtered = filtered.filter(card => (card as HTMLElement).dataset.title!.toLowerCase().includes(filter));
      }
      const sort = sortSelect.value;
      if (sort === 'name-asc') {
        filtered.sort((a, b) => a.dataset.title!.localeCompare(b.dataset.title!));
      } else if (sort === 'name-desc') {
        filtered.sort((a, b) => b.dataset.title!.localeCompare(a.dataset.title!));
      } else if (sort === 'price-asc') {
        filtered.sort((a, b) => parseFloat(a.dataset.price!) - parseFloat(b.dataset.price!));
      } else if (sort === 'price-desc') {
        filtered.sort((a, b) => parseFloat(b.dataset.price!) - parseFloat(a.dataset.price!));
      }
      renderCards(filtered);
    }

    filterInput.addEventListener('input', filterAndSort);
    sortSelect.addEventListener('change', filterAndSort);
    // Initial sort
    filterAndSort();
  </script>
</BaseLayout> 